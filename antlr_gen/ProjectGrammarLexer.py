# Generated from ProjectGrammar.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,233,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,0,1,0,1,0,1,
        1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,
        5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,
        1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,
        1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,
        1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,
        1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,3,30,183,8,30,1,31,1,31,1,31,1,31,3,31,
        189,8,31,1,31,1,31,1,32,1,32,1,32,1,32,5,32,197,8,32,10,32,12,32,
        200,9,32,1,32,1,32,1,33,4,33,205,8,33,11,33,12,33,206,1,33,1,33,
        4,33,211,8,33,11,33,12,33,212,1,34,4,34,216,8,34,11,34,12,34,217,
        1,35,1,35,5,35,222,8,35,10,35,12,35,225,9,35,1,36,4,36,228,8,36,
        11,36,12,36,229,1,36,1,36,0,0,37,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,1,0,6,4,0,10,10,13,
        13,39,39,92,92,4,0,10,10,13,13,34,34,92,92,1,0,48,57,2,0,65,90,97,
        122,3,0,48,57,65,90,97,122,3,0,9,10,13,13,32,32,241,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
        1,0,0,0,1,75,1,0,0,0,3,80,1,0,0,0,5,86,1,0,0,0,7,89,1,0,0,0,9,91,
        1,0,0,0,11,93,1,0,0,0,13,98,1,0,0,0,15,104,1,0,0,0,17,106,1,0,0,
        0,19,108,1,0,0,0,21,110,1,0,0,0,23,114,1,0,0,0,25,120,1,0,0,0,27,
        125,1,0,0,0,29,130,1,0,0,0,31,137,1,0,0,0,33,139,1,0,0,0,35,141,
        1,0,0,0,37,143,1,0,0,0,39,145,1,0,0,0,41,147,1,0,0,0,43,149,1,0,
        0,0,45,152,1,0,0,0,47,155,1,0,0,0,49,157,1,0,0,0,51,159,1,0,0,0,
        53,162,1,0,0,0,55,165,1,0,0,0,57,168,1,0,0,0,59,171,1,0,0,0,61,182,
        1,0,0,0,63,184,1,0,0,0,65,192,1,0,0,0,67,204,1,0,0,0,69,215,1,0,
        0,0,71,219,1,0,0,0,73,227,1,0,0,0,75,76,5,114,0,0,76,77,5,101,0,
        0,77,78,5,97,0,0,78,79,5,100,0,0,79,2,1,0,0,0,80,81,5,119,0,0,81,
        82,5,114,0,0,82,83,5,105,0,0,83,84,5,116,0,0,84,85,5,101,0,0,85,
        4,1,0,0,0,86,87,5,105,0,0,87,88,5,102,0,0,88,6,1,0,0,0,89,90,5,40,
        0,0,90,8,1,0,0,0,91,92,5,41,0,0,92,10,1,0,0,0,93,94,5,101,0,0,94,
        95,5,108,0,0,95,96,5,115,0,0,96,97,5,101,0,0,97,12,1,0,0,0,98,99,
        5,119,0,0,99,100,5,104,0,0,100,101,5,105,0,0,101,102,5,108,0,0,102,
        103,5,101,0,0,103,14,1,0,0,0,104,105,5,123,0,0,105,16,1,0,0,0,106,
        107,5,125,0,0,107,18,1,0,0,0,108,109,5,61,0,0,109,20,1,0,0,0,110,
        111,5,105,0,0,111,112,5,110,0,0,112,113,5,116,0,0,113,22,1,0,0,0,
        114,115,5,102,0,0,115,116,5,108,0,0,116,117,5,111,0,0,117,118,5,
        97,0,0,118,119,5,116,0,0,119,24,1,0,0,0,120,121,5,98,0,0,121,122,
        5,111,0,0,122,123,5,111,0,0,123,124,5,108,0,0,124,26,1,0,0,0,125,
        126,5,99,0,0,126,127,5,104,0,0,127,128,5,97,0,0,128,129,5,114,0,
        0,129,28,1,0,0,0,130,131,5,115,0,0,131,132,5,116,0,0,132,133,5,114,
        0,0,133,134,5,105,0,0,134,135,5,110,0,0,135,136,5,103,0,0,136,30,
        1,0,0,0,137,138,5,59,0,0,138,32,1,0,0,0,139,140,5,44,0,0,140,34,
        1,0,0,0,141,142,5,42,0,0,142,36,1,0,0,0,143,144,5,47,0,0,144,38,
        1,0,0,0,145,146,5,43,0,0,146,40,1,0,0,0,147,148,5,45,0,0,148,42,
        1,0,0,0,149,150,5,61,0,0,150,151,5,61,0,0,151,44,1,0,0,0,152,153,
        5,33,0,0,153,154,5,61,0,0,154,46,1,0,0,0,155,156,5,60,0,0,156,48,
        1,0,0,0,157,158,5,62,0,0,158,50,1,0,0,0,159,160,5,60,0,0,160,161,
        5,61,0,0,161,52,1,0,0,0,162,163,5,62,0,0,163,164,5,61,0,0,164,54,
        1,0,0,0,165,166,5,38,0,0,166,167,5,38,0,0,167,56,1,0,0,0,168,169,
        5,124,0,0,169,170,5,124,0,0,170,58,1,0,0,0,171,172,5,33,0,0,172,
        60,1,0,0,0,173,174,5,116,0,0,174,175,5,114,0,0,175,176,5,117,0,0,
        176,183,5,101,0,0,177,178,5,102,0,0,178,179,5,97,0,0,179,180,5,108,
        0,0,180,181,5,115,0,0,181,183,5,101,0,0,182,173,1,0,0,0,182,177,
        1,0,0,0,183,62,1,0,0,0,184,188,5,39,0,0,185,189,8,0,0,0,186,187,
        5,92,0,0,187,189,9,0,0,0,188,185,1,0,0,0,188,186,1,0,0,0,189,190,
        1,0,0,0,190,191,5,39,0,0,191,64,1,0,0,0,192,198,5,34,0,0,193,197,
        8,1,0,0,194,195,5,92,0,0,195,197,9,0,0,0,196,193,1,0,0,0,196,194,
        1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,201,
        1,0,0,0,200,198,1,0,0,0,201,202,5,34,0,0,202,66,1,0,0,0,203,205,
        7,2,0,0,204,203,1,0,0,0,205,206,1,0,0,0,206,204,1,0,0,0,206,207,
        1,0,0,0,207,208,1,0,0,0,208,210,5,46,0,0,209,211,7,2,0,0,210,209,
        1,0,0,0,211,212,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,68,1,
        0,0,0,214,216,7,2,0,0,215,214,1,0,0,0,216,217,1,0,0,0,217,215,1,
        0,0,0,217,218,1,0,0,0,218,70,1,0,0,0,219,223,7,3,0,0,220,222,7,4,
        0,0,221,220,1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,
        0,0,224,72,1,0,0,0,225,223,1,0,0,0,226,228,7,5,0,0,227,226,1,0,0,
        0,228,229,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,231,1,0,0,
        0,231,232,6,36,0,0,232,74,1,0,0,0,10,0,182,188,196,198,206,212,217,
        223,229,1,6,0,0
    ]

class ProjectGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    INT_KEYWORD = 11
    FLOAT_KEYWORD = 12
    BOOL_KEYWORD = 13
    CHAR_KEYWORD = 14
    STRING_KEYWORD = 15
    SEMI = 16
    COMMA = 17
    MUL = 18
    DIV = 19
    ADD = 20
    SUB = 21
    EQ = 22
    NEQ = 23
    LT = 24
    GT = 25
    LTE = 26
    GTE = 27
    AND = 28
    OR = 29
    NOT = 30
    BOOL = 31
    CHAR = 32
    STRING = 33
    FLOAT = 34
    INT = 35
    IDENTIFIER = 36
    WS = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'read'", "'write'", "'if'", "'('", "')'", "'else'", "'while'", 
            "'{'", "'}'", "'='", "'int'", "'float'", "'bool'", "'char'", 
            "'string'", "';'", "','", "'*'", "'/'", "'+'", "'-'", "'=='", 
            "'!='", "'<'", "'>'", "'<='", "'>='", "'&&'", "'||'", "'!'" ]

    symbolicNames = [ "<INVALID>",
            "INT_KEYWORD", "FLOAT_KEYWORD", "BOOL_KEYWORD", "CHAR_KEYWORD", 
            "STRING_KEYWORD", "SEMI", "COMMA", "MUL", "DIV", "ADD", "SUB", 
            "EQ", "NEQ", "LT", "GT", "LTE", "GTE", "AND", "OR", "NOT", "BOOL", 
            "CHAR", "STRING", "FLOAT", "INT", "IDENTIFIER", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "INT_KEYWORD", "FLOAT_KEYWORD", 
                  "BOOL_KEYWORD", "CHAR_KEYWORD", "STRING_KEYWORD", "SEMI", 
                  "COMMA", "MUL", "DIV", "ADD", "SUB", "EQ", "NEQ", "LT", 
                  "GT", "LTE", "GTE", "AND", "OR", "NOT", "BOOL", "CHAR", 
                  "STRING", "FLOAT", "INT", "IDENTIFIER", "WS" ]

    grammarFileName = "ProjectGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


